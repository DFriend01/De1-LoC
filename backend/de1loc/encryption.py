import os
from cryptography.fernet import Fernet
from stat import S_IREAD

CODEKEY_FILENAME = "codekey.txt"
CODEKEY = None

class CodeEncrypter:

    # The key used to encrypt and decrypt codes
    __codekey = None

    # A stream cipher generated by the code key
    __cipher_suite = None

    def __init__(self, filename=CODEKEY_FILENAME):
        """
        Initializes an instance of a CodeEncryptor

        Arguments
        ---------
        str : filename
            The path to the code key. If it does not exist then it is generated and saved to disk for
            future use.
        """
        # Read the key if it exists already
        if os.path.exists(filename):
            infile = open(filename, "rb")
            self.__codekey = infile.read()
            infile.close()

        # Generate and save the key if it does not exist
        else:
            self._codekey = Fernet.generate_key()
            outfile = open(filename, "wb")
            outfile.write(self.__codekey)
            os.chmod(filename, S_IREAD) # Make file read only
            outfile.close()

        self.__cipher_suite = Fernet(self.__codekey)

    def encryptCode(self, code):
        """
        Encrypts a code into binary data.

        Arguments
        ---------
        str : code
            A string representing the code to be encrypted.

        Returns
        -------
        bytes
            Returns the encrypted code as a binary string.
        """
        return self.__cipher_suite.encrypt(code.encode('utf-8'))

    def decryptCode(self, encrypted_code):
        """
        Decrypts a binary string based on the key.

        Arguments
        ---------
        bytes : encrypted_code
            A binary string representing the data to be decrypted.

        Returns
        -------
        bytes
            Returns a binary string representing the decrypted data.
        """
        return self.__cipher_suite.decrypt(encrypted_code)

